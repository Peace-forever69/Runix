#!/data/data/com.termux/files/usr/bin/bash
# Runix: Smart File Runner for Termux

# ‚îÄ‚îÄ Colors ‚îÄ‚îÄ
RED='\033[0;31m'
GRN='\033[0;32m'
YEL='\033[1;33m'
BLU='\033[0;34m'
NC='\033[0m'

# ‚îÄ‚îÄ Update Notification (runs every time the script is used) ‚îÄ‚îÄ
check_update() {
    LATEST_URL="https://raw.githubusercontent.com/Peace-forever69/Runix/main/Runix"
    LOCAL="$0"
    if [[ -f "$LOCAL" ]]; then
        LOCAL_HASH=$(md5sum "$LOCAL" | awk '{print $1}')
        REMOTE_HASH=$(curl -s "$LATEST_URL" | md5sum | awk '{print $1}')
        if [[ "$LOCAL_HASH" != "$REMOTE_HASH" ]]; then
            echo -e "${YEL}[Runix] Update available! Run '${BLU}run update${YEL}' to get the latest version.${NC}"
        fi
    fi
}
check_update

# ‚îÄ‚îÄ ASCII Banner ‚îÄ‚îÄ
echo -e "${GRN} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó\n‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù\n‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù \n‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó \n‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó\n‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù${NC}\n${BLU}Runix: Smart File Runner${NC}"

# ‚îÄ‚îÄ Config + Temp ‚îÄ‚îÄ
RUNIX_DIR="$HOME/Runix"
CONFIG_FILE="$RUNIX_DIR/config"
SHORTCUT_FILE="$RUNIX_DIR/shortcuts"
BIN_DIR="$RUNIX_DIR/bin"
PREVIEW_EXTENSIONS="txt log csv md json xml html class put"

mkdir -p "$BIN_DIR"

# ‚îÄ‚îÄ Load or Ask for Settings ‚îÄ‚îÄ
load_config() {
    if [[ -f "$HOME/.pexrc" && ! -f "$CONFIG_FILE" ]]; then
        echo -e "${YEL}üì¶ Migrating old config to new location...${NC}"
        mkdir -p "$RUNIX_DIR"
        mv "$HOME/.pexrc" "$CONFIG_FILE"
    fi

    if [[ ! -f "$CONFIG_FILE" ]]; then
        echo -e "${YEL}üîß First time setup...${NC}"
        mkdir -p "$RUNIX_DIR"
        echo -ne "${BLU}üìÅ Enter your main folder path (script wont work outside this path): ${NC}"
        read -r USER_FOLDER
        echo "user_folder=$USER_FOLDER" >> "$CONFIG_FILE"

        echo -e "${YEL}üëÅÔ∏è Choose preview mode:${NC}"
        echo -e "   ${GRN}[1]${NC} Always preview"
        echo -e "   ${GRN}[2]${NC} Never preview"
        echo -e "   ${GRN}[3]${NC} Ask every time"
        echo -ne "${BLU}Enter choice [1-3]: ${NC}"
        read -r CHOICE
        case "$CHOICE" in
            1) echo "preview=auto" >> "$CONFIG_FILE" ;;
            2) echo "preview=never" >> "$CONFIG_FILE" ;;
            3) echo "preview=ask" >> "$CONFIG_FILE" ;;
        esac

        echo -ne "${BLU}üß± Save compiled binaries after running? (y/n): ${NC}"
        read -r KEEP
        [[ "$KEEP" =~ ^[yY]$ ]] && echo "save_binaries=yes" >> "$CONFIG_FILE" || echo "save_binaries=no" >> "$CONFIG_FILE"

        touch "$SHORTCUT_FILE"
    fi

    USER_FOLDER=$(grep '^user_folder=' "$CONFIG_FILE" | cut -d= -f2)
    PREVIEW_MODE=$(grep '^preview=' "$CONFIG_FILE" | cut -d= -f2)
    SAVE_BINARIES=$(grep '^save_binaries=' "$CONFIG_FILE" | cut -d= -f2)
}

load_config

# ‚îÄ‚îÄ Shortcuts ‚îÄ‚îÄ
expand_shortcut() {
    grep -q "^$1=" "$SHORTCUT_FILE" && grep "^$1=" "$SHORTCUT_FILE" | cut -d= -f2- || echo "$1"
}

# ‚îÄ‚îÄ Dependency Check ‚îÄ‚îÄ
need_pkg() {
    local cmd="$1"
    local pkg="$2"
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Missing '$cmd'.${NC}"
        echo -ne "${YEL}Install '$pkg' now? (y/n): ${NC}"
        read -r ans
        if [[ "$ans" =~ ^[yY]$ ]]; then
            pkg install -y "$pkg"
        else
            echo -e "${RED}Cannot continue without '$cmd'.${NC}"
            return 1
        fi
    fi
}

# ‚îÄ‚îÄ Main Functions ‚îÄ‚îÄ

find_file() {
    find "$USER_FOLDER" -type f -name "$1" | head -n 1
}

find_java_main_class() {
    grep -E 'public\s+class\s+\w+' "$1" | grep -B 2 'public\s+static\s+void\s+main' | grep 'public\s+class' | sed -E 's/public class ([A-Za-z0-9_]+).*/\1/' | head -n 1
}

show_info() {
    echo -e "${YEL}üîß Runix Configuration:${NC}"
    echo "‚Ä¢ User folder     : $USER_FOLDER"
    echo "‚Ä¢ Preview mode    : $PREVIEW_MODE"
    echo "‚Ä¢ Save binaries   : $SAVE_BINARIES"
    echo "‚Ä¢ Config file     : $CONFIG_FILE"
    echo "‚Ä¢ Shortcut file   : $SHORTCUT_FILE"
}

run_file() {
    INPUT=$(expand_shortcut "$1")
    MODE="$2"
    FILE=$(find_file "$INPUT")
    [[ -z "$FILE" ]] && echo -e "${RED}‚ùå File not found: $INPUT${NC}" && return

    EXT="${FILE##*.}"
    BASE="${FILE%.*}"
    OUT="$BIN_DIR/$(basename "$BASE")"

    echo -e "${BLU}üìÅ File found: $FILE${NC}"
    cd "$(dirname "$FILE")" || return 1

    START=$(date +%s)
    USAGE_BEFORE=$(ps -o rss= -p $$)

    compile() {
        case "$EXT" in
            c) need_pkg clang clang || return 1; clang -fsyntax-only "$FILE" || return 1; clang "$FILE" -o "$OUT" ;;
            cpp|cc|cxx) need_pkg clang clang || return 1; clang++ -fsyntax-only "$FILE" || return 1; clang++ "$FILE" -o "$OUT" ;;
            py) need_pkg python python || return 1; python -m py_compile "$FILE" ;;
            java) need_pkg javac openjdk-17 || return 1; javac "$FILE" -d "$BIN_DIR" ;;
            js) need_pkg node nodejs || return 1; ;;
            sh) need_pkg bash bash || return 1; ;;
            *) return 1 ;;
        esac
    }

    execute() {
        case "$EXT" in
            c|cpp|cc|cxx) "$OUT" ;;
            py) need_pkg python python || return 1; python "$FILE" ;;
            java) need_pkg java openjdk-17 || return 1; MAIN_CLASS=$(find_java_main_class "$FILE"); [[ -n "$MAIN_CLASS" ]] && java -cp "$BIN_DIR" "$MAIN_CLASS" ;;
            js) need_pkg node nodejs || return 1; node "$FILE" ;;
            sh) need_pkg bash bash || return 1; bash "$FILE" ;;
            *) return 1 ;;
        esac
    }

    case "$MODE" in
        c) compile ;;
        r) execute ;;
        cr|rc|"") compile && execute ;;
        *) echo -e "${RED}‚ùå Unknown mode: $MODE${NC}"; return ;;
    esac

    END=$(date +%s)
    USAGE_AFTER=$(ps -o rss= -p $$)
    MEM_USAGE_KB=$((USAGE_AFTER - USAGE_BEFORE))
    echo -e "${YEL}‚è±Ô∏è Time taken: $((END - START))s | üß† Memory used: ${MEM_USAGE_KB}KB${NC}"

    PREVIEW_FILES=()
    for ext in $PREVIEW_EXTENSIONS; do
        for f in ./*.$ext; do [[ -f "$f" ]] && PREVIEW_FILES+=("$f"); done
    done

    if [[ ${#PREVIEW_FILES[@]} -gt 0 ]]; then
        case "$PREVIEW_MODE" in
            auto) DO_PREVIEW="y" ;;
            never) DO_PREVIEW="n" ;;
            *) echo -ne "${BLU}üëÅÔ∏è  View output files? (y/n): ${NC}"; read -r DO_PREVIEW ;;
        esac
        if [[ "$DO_PREVIEW" =~ ^[yY]$ ]]; then
            for f in "${PREVIEW_FILES[@]}"; do
                echo -e "\n${YEL}--- $f ---${NC}"
                less "$f"
            done
        fi
    fi

    [[ "$SAVE_BINARIES" != "yes" && -f "$OUT" ]] && rm -f "$OUT"
    cd - > /dev/null
}

clean_bin() {
    echo -e "${YEL}üßπ Cleaning binaries...${NC}"
    rm -rf "$BIN_DIR"/*
}

run_all() {
    find "$USER_FOLDER" -type f | while read -r file; do
        case "$file" in
            *.c|*.cpp|*.cc|*.cxx|*.py|*.java|*.js|*.sh) run_file "$(basename "$file")" ;;
        esac
    done
}

search_file() {
    echo -ne "${BLU}üîç Enter filename to search: ${NC}"
    read -r name
    echo -e "${YEL}üîé Search results in $USER_FOLDER:${NC}"
    find "$USER_FOLDER" -type f -iname "$name" | while read -r f; do
        SIZE=$(du -h "$f" | cut -f1)
        TYPE=$(file -b "$f")
        echo -e "${GRN}‚Ä¢ $(basename "$f")${NC} | $TYPE | $SIZE | $f"
    done
}

change_settings() {
    echo -ne "${BLU}üìÅ Enter new user folder: ${NC}"
    read -r FOLDER
    sed -i '/^user_folder=/d' "$CONFIG_FILE"
    echo "user_folder=$FOLDER" >> "$CONFIG_FILE"

    echo -e "${YEL}üëÅÔ∏è Preview mode:${NC}"
    echo -e "   ${GRN}[1]${NC} Always preview"
    echo -e "   ${GRN}[2]${NC} Never preview"
    echo -e "   ${GRN}[3]${NC} Ask every time"
    echo -ne "${BLU}Enter choice [1-3]: ${NC}"
    read -r CHOICE
    sed -i '/^preview=/d' "$CONFIG_FILE"
    case "$CHOICE" in
        1) echo "preview=auto" >> "$CONFIG_FILE" ;;
        2) echo "preview=never" >> "$CONFIG_FILE" ;;
        3) echo "preview=ask" >> "$CONFIG_FILE" ;;
    esac

    echo -ne "${BLU}üß± Save compiled binaries after running? (y/n): ${NC}"
    read -r KEEP
    sed -i '/^save_binaries=/d' "$CONFIG_FILE"
    [[ "$KEEP" =~ ^[yY]$ ]] && echo "save_binaries=yes" >> "$CONFIG_FILE" || echo "save_binaries=no" >> "$CONFIG_FILE"
}

add_shortcut() {
    echo -ne "${BLU}üîë Shortcut name: ${NC}"
    read -r KEY
    echo -ne "${BLU}üìÑ Command or file name to map it to: ${NC}"
    read -r VAL
    echo "$KEY=$VAL" >> "$SHORTCUT_FILE"
    echo -e "${GRN}‚úÖ Shortcut added. Use: run $KEY${NC}"
}

show_help() {
    echo -e "${YEL}üìò Runix Commands:${NC}"
    echo "  run file.ext       ‚ñ∂Ô∏è  Compile & run file"
    echo "  run file.ext c     ‚ñ∂Ô∏è  Only compile"
    echo "  run file.ext r     ‚ñ∂Ô∏è  Only run (skip compile)"
    echo "  run runall         ‚ñ∂Ô∏è  Run all files"
    echo "  run clean          ‚ñ∂Ô∏è  Clear compiled binaries"
    echo "  run search         ‚ñ∂Ô∏è  Search for files"
    echo "  run settings       ‚ñ∂Ô∏è  Reconfigure Runix"
    echo "  run info           ‚ñ∂Ô∏è  Show Runix settings"
    echo "  run shortcut       ‚ñ∂Ô∏è  Add shortcut for file/command"
    echo "  run uninstall      ‚ñ∂Ô∏è  Remove Runix"
    echo "  run update         ‚ñ∂Ô∏è  Manually update Runix"
    echo "  run help           ‚ñ∂Ô∏è  Show help message"
}

# ‚îÄ‚îÄ Command Dispatcher ‚îÄ‚îÄ
COMMAND="${1,,}"
MODE="${2,,}"
case "$COMMAND" in
    clean) clean_bin ;;
    runall) run_all ;;
    uninstall)
        echo -e "${RED}‚ö†Ô∏è Uninstall Runix? (y/n): ${NC}"
        read -r CONFIRM
        if [[ "$CONFIRM" =~ ^[yY]$ ]]; then
            rm -f "$HOME/bin/run" "$HOME/bin/Runix"
            rm -rf "$RUNIX_DIR"
            echo -e "${GRN}üßπ Uninstalled.${NC}"
        else
            echo "Cancelled."
        fi
        ;;
    update)
        echo -e "${YEL}üîÑ Manual update...${NC}"
        curl -s -o "$0" "https://raw.githubusercontent.com/Peace-forever69/Runix/main/Runix"
        chmod +x "$0"
        echo -e "${GRN}‚úÖ Updated.${NC}"
        ;;
    settings) change_settings ;;
    info) show_info ;;
    search) search_file ;;
    shortcut) add_shortcut ;;
    help|--help|-h|"") show_help ;;
    *) run_file "$1" "$2" ;;
esac
