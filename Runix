#!/data/data/com.termux/files/usr/bin/bash
# Runix: Smart File Runner for Termux & Ubuntu

# Colors
RED='\033[0;31m'
GRN='\033[0;32m'
YEL='\033[1;33m'
BLU='\033[0;34m'
CYAN='\033[1;36m'
NC='\033[0m'

# Paths
RUNIX_DIR="$HOME/Runix"
CONFIG_FILE="$RUNIX_DIR/config"
SHORTCUT_FILE="$RUNIX_DIR/shortcuts"
BIN_DIR="$RUNIX_DIR/bin"
LOG_DIR="$RUNIX_DIR/logs"
PLUGINS_DIR="$RUNIX_DIR/plugins"
PREVIEW_EXTENSIONS="txt log csv md json xml html class put"
DEFAULT_USER_FOLDER="/data/data/com.termux/files/home"

mkdir -p "$RUNIX_DIR" "$BIN_DIR" "$LOG_DIR" "$PLUGINS_DIR"

# Logging
LOG_FILE="$LOG_DIR/runix.log"
LOG_RETENTION_DAYS_DEFAULT=1

log() {
    echo "$(date '+‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
${NC}${BLU}Runix: Smart File Runner (Termux/Ubuntu)${NC}"

# Environment Detection
is_ubuntu() { grep -q "Ubuntu" /etc/issue 2>/dev/null; }
proot_distro_installed() { command -v proot-distro >/dev/null 2>&1; }
ubuntu_exists() { proot-distro list 2>/dev/null | grep -q 'ubuntu'; }

# Interactive Setup
setup_config() {
    echo -e "${YEL}üîß Initial Runix setup...${NC}"
    echo "user_folder=$DEFAULT_USER_FOLDER" > "$CONFIG_FILE"

    echo -e "${YEL}üå± Do you want to enable Ubuntu integration for better coding experience?${NC}"
    echo -e "${GRN}[y] Yes${NC}  ${RED}[n] No${NC}"
    read -r UBUNTU_CHOICE
    if [[ "$UBUNTU_CHOICE" =~ ^[yY]$ ]]; then
        if ! proot_distro_installed; then
            echo -e "${YEL}Installing proot-distro...${NC}"
            pkg install proot-distro -y
        fi
        if ! ubuntu_exists; then
            echo -e "${YEL}Installing Ubuntu...${NC}"
            proot-distro install ubuntu
        fi
        echo "use_ubuntu=yes" >> "$CONFIG_FILE"
        echo -e "${YEL}üõ† Where do you want to compile/run code by default?${NC}"
        echo -e "   ${GRN}[1]${NC} Termux"
        echo -e "   ${GRN}[2]${NC} Ubuntu"
        read -r CODE_ENV_CHOICE
        case "$CODE_ENV_CHOICE" in
            1) echo "default_env=termux" >> "$CONFIG_FILE" ;;
            2) echo "default_env=ubuntu" >> "$CONFIG_FILE" ;;
            *) echo "default_env=termux" >> "$CONFIG_FILE" ;;
        esac
    else
        echo "use_ubuntu=no" >> "$CONFIG_FILE"
        echo "default_env=termux" >> "$CONFIG_FILE"
    fi

    echo -e "${YEL}üëÅÔ∏è Choose preview mode:${NC}"
    echo -e "   ${GRN}[1]${NC} Always preview"
    echo -e "   ${GRN}[2]${NC} Never preview"
    echo -e "   ${GRN}[3]${NC} Ask every time"
    read -r CHOICE
    case "$CHOICE" in
        1) echo "preview=auto" >> "$CONFIG_FILE" ;;
        2) echo "preview=never" >> "$CONFIG_FILE" ;;
        3) echo "preview=ask" >> "$CONFIG_FILE" ;;
    esac

    echo -e "${BLU}üß± Save compiled binaries after running? (y/n): ${NC}"
    read -r KEEP
    [[ "$KEEP" =~ ^[yY]$ ]] && echo "save_binaries=yes" >> "$CONFIG_FILE" || echo "save_binaries=no" >> "$CONFIG_FILE"

    echo -e "${YEL}üóëÔ∏è How many days to keep logs? (default: 1)${NC}"
    read -r LOGDAYS
    LOGDAYS=${LOGDAYS:-1}
    echo "log_retention_days=$LOGDAYS" >> "$CONFIG_FILE"

    touch "$SHORTCUT_FILE"
}

# Load Config
load_config() {
    [[ ! -f "$CONFIG_FILE" ]] && setup_config
    USER_FOLDER=$(grep '^user_folder=' "$CONFIG_FILE" | cut -d= -f2)
    USE_UBUNTU=$(grep '^use_ubuntu=' "$CONFIG_FILE" | cut -d= -f2)
    DEFAULT_ENV=$(grep '^default_env=' "$CONFIG_FILE" | cut -d= -f2)
    PREVIEW_MODE=$(grep '^preview=' "$CONFIG_FILE" | cut -d= -f2)
    SAVE_BINARIES=$(grep '^save_binaries=' "$CONFIG_FILE" | cut -d= -f2)
    LOG_RETENTION_DAYS=$(grep '^log_retention_days=' "$CONFIG_FILE" | cut -d= -f2)
}
load_config

# Shortcuts
expand_shortcut() {
    grep -q "^$1=" "$SHORTCUT_FILE" && grep "^$1=" "$SHORTCUT_FILE" | cut -d= -f2- || echo "$1"
}

# Dependency Check
need_pkg() {
    local cmd="$1"
    local pkg="$2"
    if ! command -v "$cmd" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Missing '$cmd'.${NC}"
        echo -ne "${YEL}Install '$pkg' now? (y/n): ${NC}"
        read -r ans
        if [[ "$ans" =~ ^[yY]$ ]]; then
            if is_ubuntu; then
                apt update && apt install -y "$pkg"
            else
                pkg install -y "$pkg"
            fi
        else
            echo -e "${RED}Cannot continue without '$cmd'.${NC}"
            log "Missing dependency: $cmd"
            return 1
        fi
    fi
}

# Fuzzy/Regular File Search
find_file() {
    local fname="$1"
    if command -v fzf >/dev/null 2>&1; then
        find "$USER_FOLDER" -type f -iname "$fname*" | fzf --prompt="Choose file: " --height 20
    else
        find "$USER_FOLDER" -type f -iname "$fname*" | head -n 1
    fi
}

# Main Java Class Finder
find_java_main_class() {
    grep -E 'public\s+class\s+\w+' "$1" | grep -B 2 'public\s+static\s+void\s+main' | grep 'public\s+class' | sed -E 's/public class ([A-Za-z0-9_]+).*/\1/' | head -n 1
}

# Info
show_info() {
    echo -e "${YEL}üîß Runix Configuration:${NC}"
    echo "‚Ä¢ User folder     : $USER_FOLDER"
    echo "‚Ä¢ Preview mode    : $PREVIEW_MODE"
    echo "‚Ä¢ Save binaries   : $SAVE_BINARIES"
    echo "‚Ä¢ Ubuntu enabled  : $USE_UBUNTU"
    echo "‚Ä¢ Default env     : $DEFAULT_ENV"
    echo "‚Ä¢ Log retention   : $LOG_RETENTION_DAYS days"
    echo "‚Ä¢ Config file     : $CONFIG_FILE"
    echo "‚Ä¢ Shortcut file   : $SHORTCUT_FILE"
    echo "‚Ä¢ Plugins dir     : $PLUGINS_DIR"
}

# Parallel Execution
run_parallel() {
    local files=("$@")
    for f in "${files[@]}"; do
        run_file "$f" &
    done
    wait
}

# Plugin Runner
run_plugin() {
    local file="$1"
    local ext="${file##*.}"
    local plugin="$PLUGINS_DIR/$ext"
    if [[ -x "$plugin" ]]; then
        "$plugin" "$file"
        return $?
    fi
    return 1
}

# Compile & Execute Logic
compile() {
    local ext="$1"
    local file="$2"
    local out="$3"
    case "$ext" in
        c) need_pkg clang clang || return 1; clang -fsyntax-only "$file" || return 1; clang "$file" -o "$out" ;;
        cpp|cc|cxx) need_pkg clang clang || return 1; clang++ -fsyntax-only "$file" || return 1; clang++ "$file" -o "$out" ;;
        py) need_pkg python python || return 1; python -m py_compile "$file" ;;
        java) need_pkg javac openjdk-17 || return 1; javac "$file" -d "$BIN_DIR" ;;
        js) need_pkg node nodejs || return 1; ;;
        sh) need_pkg bash bash || return 1; ;;
        rs) need_pkg rustc rust || return 1; rustc "$file" -o "$out" ;;
        go) need_pkg go golang || return 1; go build -o "$out" "$file" ;;
        php|rb) ;; # Interpreted
        *) run_plugin "$file" || return 1 ;;
    esac
}
execute() {
    local ext="$1"
    local file="$2"
    local out="$3"
    case "$ext" in
        c|cpp|cc|cxx|rs|go) "$out" ;;
        py) need_pkg python python || return 1; python "$file" ;;
        java) need_pkg java openjdk-17 || return 1; MAIN_CLASS=$(find_java_main_class "$file"); [[ -n "$MAIN_CLASS" ]] && java -cp "$BIN_DIR" "$MAIN_CLASS" ;;
        js) need_pkg node nodejs || return 1; node "$file" ;;
        sh) need_pkg bash bash || return 1; bash "$file" ;;
        php) need_pkg php php || return 1; php "$file" ;;
        rb) need_pkg ruby ruby || return 1; ruby "$file" ;;
        *) run_plugin "$file" || return 1 ;;
    esac
}

# Ubuntu Integration
run_in_ubuntu() {
    local file="$1" mode="$2"
    TMP_RUNIX="$HOME/Runix/ubuntu_tmp"
    mkdir -p "$TMP_RUNIX"
    cp "$file" "$TMP_RUNIX/"
    BASENAME=$(basename "$file")
    CMD="cd $TMP_RUNIX; bash Runix $BASENAME $mode"
    echo -e "${YEL}üîó Running in Ubuntu...${NC}"
    proot-distro login ubuntu --bind "$HOME:/termux-home" -- bash -c "$CMD"
    rm -f "$TMP_RUNIX/$BASENAME"
}

choose_env() {
    if [[ "$USE_UBUNTU" == "yes" ]]; then
        echo -e "${YEL}üåê Where do you want to run?${NC} [termux/ubuntu] (default: $DEFAULT_ENV)"
        read -r ENV_CHOICE
        [[ -z "$ENV_CHOICE" ]] && ENV_CHOICE="$DEFAULT_ENV"
        echo "$ENV_CHOICE"
    else
        echo "termux"
    fi
}

run_file() {
    local input="$1" mode="$2"
    input=$(expand_shortcut "$input")
    local file
    file=$(find_file "$input")
    [[ -z "$file" ]] && echo -e "${RED}‚ùå File not found: $input${NC}" && log "File not found: $input" && return

    ENV_TO_USE=$(choose_env)
    if [[ "$ENV_TO_USE" == "ubuntu" ]]; then
        run_in_ubuntu "$file" "$mode"
        return
    fi

    local ext="${file##*.}"
    local base="${file%.*}"
    local out="$BIN_DIR/$(basename "$base")"

    echo -e "${BLU}üìÅ File found: $file${NC}"
    cd "$(dirname "$file")" || return 1

    START=$(date +%s)
    USAGE_BEFORE=$(ps -o rss= -p $$)

    case "$mode" in
        c) compile "$ext" "$file" "$out" ;;
        r) execute "$ext" "$file" "$out" ;;
        cr|rc|"") compile "$ext" "$file" "$out" && execute "$ext" "$file" "$out" ;;
        *) echo -e "${RED}‚ùå Unknown mode: $mode${NC}"; log "Unknown mode: $mode"; return ;;
    esac

    END=$(date +%s)
    USAGE_AFTER=$(ps -o rss= -p $$)
    MEM_USAGE_KB=$((USAGE_AFTER - USAGE_BEFORE))
    echo -e "${YEL}‚è±Ô∏è Time taken: $((END - START))s | üß† Memory used: ${MEM_USAGE_KB}KB${NC}"

    PREVIEW_FILES=()
    for ext in $PREVIEW_EXTENSIONS; do
        for f in ./*.$ext; do [[ -f "$f" ]] && PREVIEW_FILES+=("$f"); done
    done

    if [[ ${#PREVIEW_FILES[@]} -gt 0 ]]; then
        case "$PREVIEW_MODE" in
            auto) DO_PREVIEW="y" ;;
            never) DO_PREVIEW="n" ;;
            *) echo -ne "${BLU}üëÅÔ∏è  View output files? (y/n): ${NC}"; read -r DO_PREVIEW ;;
        esac
        if [[ "$DO_PREVIEW" =~ ^[yY]$ ]]; then
            for f in "${PREVIEW_FILES[@]}"; do
                if command -v bat >/dev/null 2>&1; then
                    bat "$f"
                elif command -v pygmentize >/dev/null 2>&1; then
                    pygmentize "$f"
                else
                    less "$f"
                fi
            done
        fi
    fi

    [[ "$SAVE_BINARIES" != "yes" && -f "$out" ]] && rm -f "$out"
    cd - > /dev/null
}

clean_bin() {
    echo -e "${YEL}üßπ Cleaning binaries...${NC}"
    rm -rf "$BIN_DIR"/*
}

run_all() {
    find "$USER_FOLDER" -type f | while read -r file; do
        case "$file" in
            *.c|*.cpp|*.cc|*.cxx|*.py|*.java|*.js|*.sh|*.rs|*.go|*.php|*.rb) run_file "$(basename "$file")" ;;
        esac
    done
}

search_file() {
    echo -ne "${BLU}üîç Enter filename to search: ${NC}"
    read -r name
    echo -e "${YEL}üîé Search results in $USER_FOLDER:${NC}"
    find "$USER_FOLDER" -type f -iname "$name*" | while read -r f; do
        SIZE=$(du -h "$f" | cut -f1)
        TYPE=$(file -b "$f")
        echo -e "${GRN}‚Ä¢ $(basename "$f")${NC} | $TYPE | $SIZE | $f"
    done
}

change_settings() {
    echo -ne "${BLU}üìÅ Enter new user folder: ${NC}"
    read -r FOLDER
    sed -i '/^user_folder=/d' "$CONFIG_FILE"
    echo "user_folder=$FOLDER" >> "$CONFIG_FILE"

    echo -e "${YEL}üëÅ mode:${NC}"
    echo -e "   ${GRN}[1]${NC} Always preview"
    echo -e "   ${GRN}[2]${NC} Never preview"
    echo -e "   ${GRN}[3]${NC} Ask every time"
    read -r CHOICE
    sed -i '/^preview=/d' "$CONFIG_FILE"
    case "$CHOICE" in
        1) echo "preview=auto" >> "$CONFIG_FILE" ;;
        2) echo "preview=never" >> "$CONFIG_FILE" ;;
        3) echo "preview=ask" >> "$CONFIG_FILE" ;;
    esac

    echo -ne "${BLU}üß± Save compiled binaries after running? (y/n): ${NC}"
    read -r KEEP
    sed -i '/^save_binaries=/d' "$CONFIG_FILE"
    [[ "$KEEP" =~ ^[yY]$ ]] && echo "save_binaries=yes" >> "$CONFIG_FILE" || echo "save_binaries=no" >> "$CONFIG_FILE"

    echo -ne "${YEL}üóëÔ∏è How many days to keep logs? (default: 1): ${NC}"
    read -r LOGDAYS
    sed -i '/^log_retention_days=/d' "$CONFIG_FILE"
    LOGDAYS=${LOGDAYS:-1}
    echo "log_retention_days=$LOGDAYS" >> "$CONFIG_FILE"
}

add_shortcut() {
    echo -ne "${BLU}üîë Shortcut name: ${NC}"
    read -r KEY
    echo -ne "${BLU}üìÑ Command or file name to map it to: ${NC}"
    read -r VAL
    echo "$KEY=$VAL" >> "$SHORTCUT_FILE"
    echo -e "${GRN}‚úÖ Shortcut added. Use: run $KEY${NC}"
}

show_help() {
    echo -e "${YEL}üìò Runix Commands:${NC}"
    echo "  run file.ext       ‚ñ∂Ô∏è  Compile & run file"
    echo "  run file.ext c     ‚ñ∂Ô∏è  Only compile"
    echo "  run file.ext r     ‚ñ∂Ô∏è  Only run (skip compile)"
    echo "  run runall         ‚ñ∂Ô∏è  Run all files"
    echo "  run clean          ‚ñ∂Ô∏è  Clear compiled binaries"
    echo "  run search         ‚ñ∂Ô∏è  Search for files"
    echo "  run settings       ‚ñ∂Ô∏è  Reconfigure Runix"
    echo "  run info           ‚ñ∂Ô∏è  Show Runix settings"
    echo "  run shortcut       ‚ñ∂Ô∏è  Add shortcut for file/command"
    echo "  run uninstall      ‚ñ∂Ô∏è  Remove Runix"
    echo "  run update         ‚ñ∂Ô∏è  Manually update Runix"
    echo "  run help           ‚ñ∂Ô∏è  Show help message"
}

last_error() {
    echo -e "${YEL}Last error log:${NC}"
    tail -n 20 "$LOG_FILE"
}

list_plugins() {
    echo -e "${YEL}Available plugins:${NC}"
    ls "$PLUGINS_DIR"
}

# Command Dispatcher
COMMAND="${1,,}"
MODE="${2,,}"
case "$COMMAND" in
    clean) clean_bin ;;
    runall) run_all ;;
    uninstall)
        echo -e "${RED}‚ö†Ô∏è Uninstall Runix? (y/n): ${NC}"
        read -r CONFIRM
        if [[ "$CONFIRM" =~ ^[yY]$ ]]; then
            rm -f "$HOME/bin/run" "$HOME/bin/Runix"
            rm -rf "$RUNIX_DIR"
            echo -e "${GRN}üßπ Uninstalled.${NC}"
        else
            echo "Cancelled."
        fi
        ;;
    update)
        echo -e "${YEL}üîÑ Manual update...${NC}"
        curl -s -o "$0" "https://raw.githubusercontent.com/Peace-forever69/Runix/main/Runix"
        chmod +x "$0"
        echo -e "${GRN}‚úÖ Updated.${NC}"
        ;;
    settings|setup) change_settings ;;
    info) show_info ;;
    search) search_file ;;
    shortcut) add_shortcut ;;
    help|--help|-h|"") show_help ;;
    last-error) last_error ;;
    plugins) list_plugins ;;
    *) run_file "$1" "$2" ;;
esac